We decided to choose a MEAN stack as our technology for a variety of reasons. First was the wide availability of modules and plugins through the superb npm package manager. Npm seamlessly handles dependencies so that we can spend more time on make our application and less time on figuring out why a module that we want to use will not work. Second, our research showed that Node.js is really tuned for performance, which will hopefully make our app quick. Specifically, Node’s non-blocking nature is perfectly suited for a web app that does not need to do processor intensive tasks but needs to respond quickly to perhaps a large volume of easy to complete tasks. This is a key differentiator compared to other technologies. While our app will likely never be used by more than a few users at a time, 

Third, with the use of mongoDB, which is a non-relational database, we will be able to use JSON to store our data, which will save us time when we need to access data stored in our database. In particular, traditional relational databases require some type of translation when they are read, where as mongoDB will allow us to store javascript objects (JSON) directly and laid them into live objects with ease. Finally, we noted some cool modules that were available that could improve our app. There is Jade, which is the de-facto standard for writing HTML for a MEAN-stack application, which abstracts away from traditional HTML tags and makes writing templates much easier. We also noted the coffee-script module, which can help speed up development of the javascript code that actually runs the application. Lastly, we came across forever, a utility that ensure that our app run continuously, even when facing unexpected errors. This module was especially important because we would not want one rare error to bring down the app for all of our users. 

We looked at a few other technologies to run our app, but ultimately decided against them. Django, the Python web framework, was the technology we researched the most because we were all very familiar with Python and thought that it could be a good fit for our skills. We ended up not going with Django for a variety of reasons. First, we learned that Django prefers a relational database to store its data, but we thought that mongoDB would make the most sense for the data that we would be receiving (almost exclusively JSON from Spotify’s API). Second, we read about some troubling performance/scaling issues with Django. While these issues might have been overblown and could be fixed by a dedicated team, we felt that we did not have the time to worry about performance issues when building on such a short time schedule. Third, while Django has a concept of packages to be installed, like Node, we felt that much of the functionality needed for our app (routing requests, rendering templates, etc.) were built directly into Django, which worried us because if one component did not exactly suit our need we would be unable to switch it out like we can with the MEAN-stack approach.